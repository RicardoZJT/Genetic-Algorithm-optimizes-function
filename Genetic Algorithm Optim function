import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D


DNA_SIZE = 24
POP_SIZE = 200
CROSSOVER_RATE = 0.8
MUTATION_RATE = 0.005
N_GENERATIONS = 100
X_BOUND = [-100, 100]
Y_BOUND = [-100, 100]


def F(x, y):
    ss = x**2 + y**2
    return  (0.5 - ((np.sin(np.sqrt(ss)))**2 - 0.5) / (1 + 0.001 * (ss))**2)


def plot_3d(ax):
    X = np.linspace(*X_BOUND, 100)  # [-100,100]均匀采样100个点 X.shape=(100,)
    Y = np.linspace(*Y_BOUND, 100)
    X, Y = np.meshgrid(X, Y)  # 根据传入的两个一维数组参数生成两个数组元素的列表shape=(100,100)
    Z = F(X, Y)
    ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm)  # 绘制3D图像，行row跨度，列column跨度
    ax.set_zlim(-1, 1)  # z轴范围
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    plt.pause(3)
    plt.show()


def get_fitness(pop):
    x, y = translateDNA(pop)
    pred = F(x, y)
    return (pred - np.min(pred))  # 减去最小的适应度防止出现负数，fitness的范围为[0, np.max(pred)-np.min(pred)]


def draw(pop):
    x, y = translateDNA(pop)
    pred = F(x, y)
    mean_pred = np.mean(pred)
    F_values.append(mean_pred)
    return F_values


def translateDNA(pop):  # decode,输出十进制数
    x_pop = pop[:, 1::2]
    y_pop = pop[:, ::2]
    x_2to10 = x_pop.dot(2 ** np.arange(DNA_SIZE)[::-1])  # 二进制->十进制
    y_2to10 = y_pop.dot(2 ** np.arange(DNA_SIZE)[::-1])
    x_float = x_2to10 / float(2 ** DNA_SIZE - 1)  # 转换成[0，1]区间的小数
    y_float = y_2to10 / float(2 ** DNA_SIZE - 1)
    x = x_float * (X_BOUND[1] - X_BOUND[0]) + X_BOUND[0]  # 映射到我们的区间
    y = y_float * (Y_BOUND[1] - Y_BOUND[0]) + Y_BOUND[0]
    return x, y


def crossover_and_mutation(pop, CROSSOVER_RATE=0.8):
    new_pop = []
    for father in pop:
        child = father
        if np.random.rand() < CROSSOVER_RATE:  # 选取[0,1)之间的随机数
            mother = pop[np.random.randint(POP_SIZE)]  # 选择另一个个体作为母亲
            cross_points = np.random.randint(low=0, high=DNA_SIZE * 2)  # 随机产生交叉点
            child[cross_points:] = mother[cross_points:]  # 子代得到位于交叉点后的母亲的基因
        mutation(child)
        new_pop.append(child)
    return new_pop


def mutation(child, MUTATION_RATE=0.003):
    if np.random.rand() < MUTATION_RATE:
        mutate_point = np.random.randint(0, DNA_SIZE * 2)  # 随机产生一个实数，代表要变异基因的位置
        child[mutate_point] = child[mutate_point] ^ 1  # 将变异点的二进制为反转


def select(pop, fitness):
    idx = np.random.choice(np.arange(POP_SIZE), size=POP_SIZE, replace=True,
                           p=(fitness) / (fitness.sum()))
    return pop[idx]


def print_info(pop):
    fitness = get_fitness(pop)
    max_fitness_index = np.argmax(fitness)
    print("最大适应度:", fitness[max_fitness_index])
    x, y = translateDNA(pop)
    print("最优个体：", pop[max_fitness_index])
    print("(x, y):", (x[max_fitness_index], y[max_fitness_index]))
    print("函数最大值", F(x[max_fitness_index], y[max_fitness_index]))


if __name__ == "__main__":
    fig = plt.figure()
    ax = Axes3D(fig)
    plt.ion()  # 将画图模式改为交互模式，遇到plt.show不暂停，继续执行
    plot_3d(ax)
    F_values = []

    pop = np.random.randint(2, size=(POP_SIZE, DNA_SIZE * 2))  # encode,a.shape=(200,48)
    for i in range(N_GENERATIONS):  # 75
        x, y = translateDNA(pop)
        if 'sca' in locals():
            sca.remove()
        sca = ax.scatter(x, y, F(x, y), c='green', marker='o')  # 散点
        plt.show()
        plt.pause(0.1)
        pop = np.array(crossover_and_mutation(pop, CROSSOVER_RATE))
        fitness = get_fitness(pop)
        point_draw = draw(pop)
        pop = select(pop, fitness)


    plt.figure()
    plt.plot(F_values)
    plt.xlabel('generation')
    plt.ylabel('F_mean/generation')
    plt.xlim(0, 80)
    plt.ylim(0.4, 1)
    plt.show()

    print_info(pop)
    plt.ioff()
    plot_3d(ax)
